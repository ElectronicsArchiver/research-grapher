{"version":3,"sources":["PDFViewer.js"],"names":["PDFViewer","props","useState","showPDF","setShowPDF","paper","useSelector","state","paperReducer","progressBar","setProgressBar","url","setUrl","useEffect","isOpenAccess","arxivId","store","dispatch","type","toast","setURlBasedOnPaperAvailability","title","PopUpUrlLink","className","src","frameBorder","onLoad","event","allowFullScreen","href","target","rel"],"mappings":"4QAKaA,EAAY,SAACC,GAAW,IAAD,EACJC,oBAAS,GADL,mBAC3BC,EAD2B,KAClBC,EADkB,KAE9BC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aAAaH,SAFpB,EAGIH,oBAAS,GAHb,mBAG3BO,EAH2B,KAGdC,EAHc,OAIZR,mBAAS,IAJG,mBAI3BS,EAJ2B,KAItBC,EAJsB,KASlC,OAHAC,qBAAU,YAqCZ,SACER,EACAO,EACAR,EACAM,GAEIL,EAAMS,eAERF,EAAOP,EAAMM,KACbP,GAAW,GACXM,GAAe,IAEbL,EAAMU,UACRH,EAAO,yBAAD,OAA0BP,EAAMU,QAAhC,SACNX,GAAW,GACXM,GAAe,IAEZL,EAAMS,cAAiBT,EAAMU,UAEhCC,IAAMC,SAAS,CACbC,KAAM,aACNC,MAAO,qEAETP,EAAO,IACPR,GAAW,GACXM,GAAe,IA7DfU,CAA+Bf,EAAOO,EAAQR,EAAYM,KACzD,CAACL,IAEF,eAAC,OAAD,CAAMgB,MAAM,UAAZ,UACE,cAACC,EAAD,CAAcX,IAAKA,EAAKN,MAAOA,IAC/B,sBAAKkB,UAAU,kBAAf,UACGd,EAAc,cAAC,cAAD,IAAkB,KAChCN,EACC,wBAAQkB,MAAM,aACZG,IAAKb,EACLc,YAAY,IACZC,OAAQ,SAACC,GAAD,OAAWjB,GAAe,IAClCkB,iBAAe,IAEf,YAMG5B,YAGR,IAAMsB,EAAe,SAACrB,GAC3B,OAAIA,EAAMI,OAASJ,EAAMU,IAErB,oBAAGkB,KAAM5B,EAAMU,IAAKmB,OAAO,SAASC,IAAI,sBAAxC,UACG9B,EAAMU,IACP,cAAC,OAAD,6BAIC","file":"static/js/5.7992aad5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Card, Icon, ProgressBar } from \"react-materialize\";\nimport { useSelector } from \"react-redux\";\nimport { store } from \"./StateManagement/store\";\n\nexport const PDFViewer = (props) => {\n  const [showPDF, setShowPDF] = useState(false);\n  var paper = useSelector((state) => state.paperReducer.paper);\n  const [progressBar, setProgressBar] = useState(true);\n  const [url, setUrl] = useState(\"\");\n\n  useEffect(() => {\n    setURlBasedOnPaperAvailability(paper, setUrl, setShowPDF, setProgressBar);\n  }, [paper]);\n  return (\n    <Card title=\"Preview\">\n      <PopUpUrlLink url={url} paper={paper} />\n      <div className=\"video-container\">\n        {progressBar ? <ProgressBar /> : null}\n        {showPDF ? (\n          <iframe title='pdf_viewer'\n            src={url}\n            frameBorder=\"0\"\n            onLoad={(event) => setProgressBar(false)}\n            allowFullScreen\n          />\n        ) : null}\n      </div>\n    </Card>\n  );\n};\n\nexport default PDFViewer;\n\n\nexport const PopUpUrlLink = (props) => {\n  if (props.paper && props.url) {\n    return (\n      <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {props.url}\n        <Icon>open_in_new</Icon>\n      </a>\n    );\n  }\n  return null;\n};\n\n// Can this be push into Redux?\nfunction setURlBasedOnPaperAvailability(\n  paper,\n  setUrl,\n  setShowPDF,\n  setProgressBar\n) {\n  if (paper.isOpenAccess) {\n    // TODO: if other opensource pdf viewer is then update this section\n    setUrl(paper.url);\n    setShowPDF(false);\n    setProgressBar(false);\n  }\n  if (paper.arxivId) {\n    setUrl(`https://arxiv.org/pdf/${paper.arxivId}.pdf`);\n    setShowPDF(true);\n    setProgressBar(false);\n  }\n  if (!paper.isOpenAccess && !paper.arxivId) {\n    // TODO: remove the preview component if the paper is not available for public\n    store.dispatch({\n      type: \"SEND_TOAST\",\n      toast: \"Loaded paper is not available for public access hence no preview\",\n    });\n    setUrl(\"\");\n    setShowPDF(false);\n    setProgressBar(true);\n  }\n}\n"],"sourceRoot":""}