{"version":3,"sources":["Components/SelectedNode.js","Components/PaperLinks.js"],"names":["PaperDetails","React","lazy","Card","updateLoadedPaper","response","abstract","store","dispatch","updatePaper","paper","success","isLoading","M","html","error","displayLength","SelectedNode","CardContent","CardActions","selectedNode","useSelector","state","graph","PaperLinks","LoadPaperComponent","href","onClick","arxivId","getPaperFromApi","then","doi","paperId","updateLoadedPaperAndGraph","unshift","fallback","title","actions","Icon","URLComponent","url","id","target","rel"],"mappings":"kGAAA,mGASMA,EAAeC,IAAMC,MAAK,kBAAM,gCAChCC,EAAOF,IAAMC,MAAK,kBAAM,oCA+C9B,SAASE,EAAkBC,GACrBA,EAASC,SACXC,IAAMC,SACJC,YAAY,CAAEC,MAAOL,EAAUM,SAAS,EAAMC,WAAW,MAG3DL,IAAMC,SACJC,YAAY,CAAEC,MAAOL,EAAUM,SAAS,EAAOC,WAAW,KAE5DC,QAAQ,CAAEC,KAAMT,EAASU,MAAOC,cAAe,OA5BpCC,UA1BM,WACnB,IACIC,EAAaC,EADXC,EAAeC,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMH,gBAExD,GAAIA,EAAc,CAChBF,EAAc,cAAClB,EAAD,CAAcU,MAAOU,IACnCD,EAAcK,qBAAW,CAAEd,MAAOU,IAClC,IAAMK,EACJ,mBACEC,KAAK,IACLC,QAAS,YAmBjB,SAAmCP,GAC7BA,EAAaQ,QACfC,YAAgBT,EAAaQ,QAAS,SAASE,MAAK,SAACzB,GACnDD,EAAkBC,OAEXe,EAAaW,KAIbX,EAAaY,UAHtBH,YAAgBT,EAAaY,SAASF,MAAK,SAACzB,GAC1CD,EAAkBC,MAzBd4B,CAA0Bb,IAH9B,wBAQFD,EAAYe,QAAQT,QACfP,EAAc,mCACrB,OACE,cAAC,WAAD,CAAUiB,SAAU,cAAC,IAAD,IAApB,SACE,cAAChC,EAAD,CAAMiC,MAAM,iBAAiBC,QAASlB,EAAtC,SACGD,Q,gCChCT,0HACMoB,EAAOrC,IAAMC,MAAK,kBAAM,oCAEvB,SAASsB,EAAT,GAAgC,IAAVd,EAAS,EAATA,MAC3B,MAAO,CACLA,EAAMkB,SACJ,cAACW,EAAD,CACEC,IAAG,gCAA2B9B,EAAMkB,QAAjC,QACHa,GAAI/B,EAAMkB,SACLlB,EAAMkB,SAGflB,EAAMqB,KACJ,cAACQ,EAAD,CACEC,IAAG,0BAAqB9B,EAAMqB,KAC9BU,GAAI/B,EAAMqB,KACLrB,EAAMqB,KAGfrB,EAAM8B,KACJ,cAACD,EAAD,CAAcC,IAAK9B,EAAM8B,IAAKC,GAAI/B,EAAMsB,SAActB,EAAMsB,UAInDR,YAER,IAAMe,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,GAClC,OACE,oBAAGf,KAAMc,EAAYE,OAAO,SAASC,IAAI,sBAAzC,UACGF,EACD,cAACH,EAAD,4BAFgB","file":"static/js/10.904f2eca.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\nimport ProgressBar from \"react-materialize/lib/ProgressBar\";\nimport { useSelector } from \"react-redux\";\nimport { updatePaper } from \"../store/LoadedPaperSlice\";\nimport { getPaperFromApi } from \"../store/SemanticScholarAPI\";\nimport store from \"../store/store\";\nimport { PaperLinks } from \"./PaperLinks\";\nimport * as M from \"materialize-css\";\n\nconst PaperDetails = React.lazy(() => import(\"./PaperDetails\"));\nconst Card = React.lazy(() => import(\"react-materialize/lib/Card\"));\n\nconst SelectedNode = () => {\n  const selectedNode = useSelector((state) => state.graph.selectedNode);\n  let CardContent, CardActions;\n  if (selectedNode) {\n    CardContent = <PaperDetails paper={selectedNode} />;\n    CardActions = PaperLinks({ paper: selectedNode });\n    const LoadPaperComponent = (\n      <a\n        href=\"#\"\n        onClick={() => {\n          updateLoadedPaperAndGraph(selectedNode);\n        }}>\n        Load Paper\n      </a>\n    );\n    CardActions.unshift(LoadPaperComponent);\n  } else CardContent = \"Currently no node is selected...\";\n  return (\n    <Suspense fallback={<ProgressBar />}>\n      <Card title=\"Selected Paper\" actions={CardActions}>\n        {CardContent}\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default SelectedNode;\n\nfunction updateLoadedPaperAndGraph(selectedNode) {\n  if (selectedNode.arxivId) {\n    getPaperFromApi(selectedNode.arxivId, \"arxiv\").then((response) => {\n      updateLoadedPaper(response);\n    });\n  } else if (selectedNode.doi) {\n    getPaperFromApi(selectedNode.paperId).then((response) => {\n      updateLoadedPaper(response);\n    });\n  } else if (selectedNode.paperId) {\n    getPaperFromApi(selectedNode.paperId).then((response) => {\n      updateLoadedPaper(response);\n    });\n  }\n}\n\n// ! copied from StateChangeListener as is\nfunction updateLoadedPaper(response) {\n  if (response.abstract)\n    store.dispatch(\n      updatePaper({ paper: response, success: true, isLoading: false })\n    );\n  else {\n    store.dispatch(\n      updatePaper({ paper: response, success: false, isLoading: false })\n    );\n    M.toast({ html: response.error, displayLength: 1000 });\n  }\n}\n","import React from \"react\";\nconst Icon = React.lazy(() => import(\"react-materialize/lib/Icon\"));\n\nexport function PaperLinks({ paper }) {\n  return [\n    paper.arxivId && (\n      <URLComponent\n        url={`https://arxiv.org/pdf/${paper.arxivId}.pdf`}\n        id={paper.arxivId}\n        key={paper.arxivId}\n      />\n    ),\n    paper.doi && (\n      <URLComponent\n        url={`https://doi.org/${paper.doi}`}\n        id={paper.doi}\n        key={paper.doi}\n      />\n    ),\n    paper.url && (\n      <URLComponent url={paper.url} id={paper.paperId} key={paper.paperId} />\n    ),\n  ];\n}\nexport default PaperLinks;\n\nexport const URLComponent = ({ url, id }) => {\n  return (\n    <a href={url} key=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\n      {id}\n      <Icon>open_in_new</Icon>\n    </a>\n  );\n};\n"],"sourceRoot":""}