{"version":3,"sources":["NavBar.js","Components/PDFViewer.js","Components/LoadedPaper.js","Components/circle_node.svg","Components/cone_node.svg","Components/GraphOperations.js","store/GraphSlice.js","store/LoadedPaperSlice.js","store/SemanticScholarAPI.js","store/StateChangeListeners.js","store/store.js","Components/ThreeJsEffects.js","Components/CitationGraph.js","Components/SelectedNode.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","store/paperInputSlice.js","Components/PaperLinks.js"],"names":["NavBar","Fragment","brand","href","className","Card","React","lazy","Icon","PDFViewer","paper","useSelector","state","loadedPaper","success","ShowPdf","isLoading","arxivId","url","id","doi","DoiCard","SemanticScholarCard","title","fallback","CardComponent","actions","target","rel","src","frameBorder","paperId","PaperDetails","PaperLinks","LoadedPaper","mergeCitationsWithGraph","citations","graph","forEach","citation","mergeNode","isCitation","mergeDirectedEdge","type","mergeReferencesWithGraph","references","reference","isReference","beautifyNodes","node","attributes","node_color","text_color","color","colorizeNodes","geometry","SphereGeometry","ConeGeometry","BoxGeometry","generateNodeGeometry","initialState","DirectedGraph","selectedNode","GraphSlice","createSlice","name","reducers","updateGraph","payload","changeSelectedNode","LoadedPaperSlice","updatePaper","getPaperFromApi","paperType","baseUrl","undefined","fetch","then","response","json","updateLoadedPaper","abstract","store","dispatch","M","html","error","displayLength","ReduxStateChangeListener","require","configureStore","reducer","paperInput","paperInputSliceReducer","stateCallbackManager","register","oldpaper","oldState","toLowerCase","stripped_paper","mergePaperWithGraph","start","generateBrightLinks","link","linkColors","Float32Array","material","LineBasicMaterial","vertexColors","transparent","BufferGeometry","setAttribute","BufferAttribute","Line","makeCustomNodes","str","n","sprite","truncated_id","SpriteText","textHeight","position","y","generateSpriteText","length","substr","mesh","MeshBasicMaterial","Mesh","group","Group","add","addUnrealBloomPass","ref","d3Force","distance","bloomPassObject","postProcessingComposer","passes","find","x","UnrealBloomPass","strength","radius","exposure","threshold","setBloomParameters","addPass","CitationGraph","redux_graph_object","useState","graphToD3Conversion","setGraph","window","addEventListener","e","indexOf","code","preventDefault","useEffect","toJSON","nodes","Legends","controlType","width","innerWidth","height","innerHeight","graphData","nodeThreeObject","onNodeClick","handleSelectedNode","backgroundColor","linkThreeObject","cooldownTime","Infinity","event","data","JSON","parse","stringify","split","join","convertToD3Graph","links","map","source","label","attachLabelsToEdges","circle_node","alt","cone_node","SelectedNode","CardContent","CardActions","LoadPaperComponent","onClick","updateLoadedPaperAndGraph","unshift","Container","PaperInput","App","isLoadedPaperReady","GraphWithPaperDetails","l","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","paperInputSlice","addPaper","action","URLComponent"],"mappings":"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","file":"static/js/main.69dc1fb1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar } from \"react-materialize\";\nimport * as M from \"materialize-css\";\n\nexport const NavBar = () => {\n  return (\n    <React.Fragment>\n      <Navbar\n        brand={\n          <a href=\"\" className=\"center\">\n            Research Grapher\n          </a>\n        }\n        className=\"black\"\n      ></Navbar>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar;\n","import React, { Suspense } from \"react\";\nimport { ProgressBar } from \"react-materialize\";\nimport { useSelector } from \"react-redux\";\nconst Card = React.lazy(() => import(\"react-materialize/lib/Card\"));\nconst Icon = React.lazy(() => import(\"react-materialize/lib/Icon\"));\n\nconst PDFViewer = () => {\n  const paper = useSelector((state) => state.loadedPaper.paper);\n  const success = useSelector((state) => state.loadedPaper.success);\n  const isLoading = useSelector((state) => state.loadedPaper.isLoading);\n  var ShowPdf = null;\n  if (success) {\n    if (paper.arxivId) {\n      ShowPdf = (\n        <CardComponent\n          url={`https://arxiv.org/pdf/${paper.arxivId}.pdf`}\n          id={paper.arxivId}\n        ></CardComponent>\n      );\n    } else if (paper.doi) {\n      ShowPdf = <DoiCard paper={paper} />;\n    } else {\n      ShowPdf = <SemanticScholarCard paper={paper} />;\n    }\n  } else {\n    ShowPdf = (\n      <Card title=\"Preview\">\n        <span>Unable to load the paper</span>\n      </Card>\n    );\n  }\n\n  return <Suspense fallback={<ProgressBar />}>{ShowPdf}</Suspense>;\n};\n\nexport default PDFViewer;\n\nexport const CardComponent = ({ url, id }) => {\n  return (\n    <Card\n      title=\"Preview\"\n      actions={[\n        <a href={url} key=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {id}\n          <Icon>open_in_new</Icon>\n        </a>,\n      ]}\n    >\n      {/* TODO: fix the size of the iframe element */}\n      <iframe src={url} frameBorder=\"0\"></iframe>\n    </Card>\n  );\n};\n\nfunction SemanticScholarCard({ paper }) {\n  return (\n    <Card title=\"Preview\">\n      <a href={paper.url} key=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\n        {paper.paperId}\n        <Icon>open_in_new</Icon>\n      </a>\n    </Card>\n  );\n}\n\nfunction DoiCard({ paper }) {\n  return (\n    <Card title=\"Preview\">\n      <a\n        href={`https://doi.org/${paper.doi}`}\n        key=\"\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {paper.doi}\n        <Icon>open_in_new</Icon>\n      </a>\n    </Card>\n  );\n}\n","import React, { Suspense } from \"react\";\nimport { ProgressBar } from \"react-materialize\";\nimport { useSelector } from \"react-redux\";\n\nconst Card = React.lazy(() => import(\"react-materialize/lib/Card\"));\nconst PaperDetails = React.lazy(() => import(\"./PaperDetails\"));\nconst PaperLinks = React.lazy(() => import(\"./PaperLinks\"));\nconst LoadedPaper = () => {\n  const paper = useSelector((state) => state.loadedPaper.paper);\n  const success = useSelector((state) => state.loadedPaper.success);\n  const isLoading = useSelector((state) => state.loadedPaper.isLoading);\n\n  return (\n    <Suspense fallback={<ProgressBar />}>\n      <Card\n        title=\"Loaded Paper\"\n        actions={success && <PaperLinks paper={paper} />}>\n        {success && <PaperDetails paper={paper} />}\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default LoadedPaper;\n","export default __webpack_public_path__ + \"static/media/circle_node.5dd02228.svg\";","export default __webpack_public_path__ + \"static/media/cone_node.3631d62e.svg\";","import { DirectedGraph } from \"graphology\";\nimport { BoxGeometry, ConeGeometry, SphereGeometry } from \"three\";\n\nexport const mergePaperWithGraph = (paper, graph) => {\n  const { citations, references, ...stripped_paper } = paper;\n  graph.mergeNode(stripped_paper.title, stripped_paper);\n\n  mergeCitationsWithGraph(citations, stripped_paper, graph);\n  mergeReferencesWithGraph(references, stripped_paper, graph);\n  return graph;\n};\n\nconst mergeCitationsWithGraph = (citations, paper, graph) => {\n  citations.forEach((citation) => {\n    graph.mergeNode(citation.title, { ...citation, isCitation: true });\n    graph.mergeDirectedEdge(citation.title, paper.title, {\n      type: \"cites\",\n    });\n  });\n};\n\nconst mergeReferencesWithGraph = (references, paper, graph) => {\n  references.forEach((reference) => {\n    graph.mergeNode(reference.title, { ...reference, isReference: true });\n    graph.mergeDirectedEdge(paper.title, reference.title, {\n      type: \"refers\",\n    });\n  });\n};\n\nexport const convertToD3Graph = (graph) => {\n  return JSON.parse(\n    JSON.stringify(graph.toJSON())\n      .split('\"edges\":')\n      .join('\"links\":')\n      .split('\"key\":')\n      .join('\"id\":')\n  );\n};\n\nexport const attachLabelsToEdges = (graph) => {\n  graph.links = graph.links.map((link) => {\n    return {\n      source: link.source,\n      target: link.target,\n      label: link.attributes.type,\n    };\n  });\n  return graph;\n};\n\nexport const beautifyNodes = (node) => {\n  colorizeNodes(node);\n  generateNodeGeometry(node);\n  return node;\n};\nfunction generateNodeGeometry(node) {\n  if (node.attributes.isReference) {\n    node.geometry = new SphereGeometry(10, 10, 10);\n  } else if (node.attributes.isCitation) {\n    node.geometry = new ConeGeometry(10, 20, 10);\n  } else {\n    node.geometry = new BoxGeometry(10, 10, 10);\n  }\n}\n\nfunction colorizeNodes(node) {\n  if (node.attributes.arxivId) {\n    // pink and indigo (bladerunner 2049)\n    node.node_color = \"#d500f9\";\n    node.text_color = \"#3d5afe\";\n  } else if (node.attributes.doi || node.attributes.url) {\n    // TODO:look for alternative color combo\n    node.node_color = \"#13EC40\";\n    node.text_color = \"#FEE13D\";\n  } else {\n    node.color = \"red\";\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { DirectedGraph } from \"graphology\";\n\nexport const initialState = {\n  graph: new DirectedGraph(),\n  selectedNode: null,\n};\n\nconst GraphSlice = createSlice({\n  name: \"Graph\",\n  initialState,\n  reducers: {\n    updateGraph: (state, actions) => {\n      return {\n        ...state,\n        graph: actions.payload.graph,\n      };\n    },\n    changeSelectedNode: (state, actions) => {\n      return {\n        ...state,\n        selectedNode: actions.payload.node,\n      };\n    },\n  },\n});\n\nexport const { updateGraph, changeSelectedNode } = GraphSlice.actions;\n\nexport default GraphSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  paper: null,\n  success: false,\n  isLoading: false,\n};\n\nconst LoadedPaperSlice = createSlice({\n  name: \"LoadedPaper\",\n  initialState,\n  reducers: {\n    updatePaper: (state, actions) => {\n      return {\n        ...state,\n        paper: actions.payload.paper,\n        success: actions.payload.success,\n        isLoading: actions.payload.isLoading,\n      };\n    },\n  },\n});\n\nexport const { updatePaper } = LoadedPaperSlice.actions;\n\nexport default LoadedPaperSlice.reducer;\n","export function getPaperFromApi(paperId, paperType) {\n  const baseUrl = \"https://api.semanticscholar.org/v1/paper/\";\n  let url;\n  if (paperType !== null && paperType !== undefined)\n    url = baseUrl + paperType + \":\" + paperId;\n  else url = baseUrl + paperId;\n\n  return fetch(url)\n    .then((response) => response.json())\n    .then((response) => response);\n}\n","import { updatePaper } from \"./LoadedPaperSlice\";\nimport { getPaperFromApi } from \"./SemanticScholarAPI\";\nimport store from \"./store\";\nimport * as M from \"materialize-css\";\nimport { mergePaperWithGraph } from \"../Components/GraphOperations\";\nimport { updateGraph } from \"./GraphSlice\";\n\nexport const onPaperInputChange = (paper, state, oldpaper, oldState) => {\n  if (paper.paperId !== oldpaper.paperId) {\n    if (paper.paperType.toLowerCase() === \"arxiv\") {\n      getPaperFromApi(paper.paperId, paper.paperType).then((response) => {\n        updateLoadedPaper(response);\n      });\n    } else if (paper.paperType.toLowerCase() === \"doi\") {\n      getPaperFromApi(paper.paperId).then((response) => {\n        updateLoadedPaper(response);\n      });\n    } else if (paper.paperType.toLowerCase() === \"semanticscholar\") {\n      getPaperFromApi(paper.paperId).then((response) => {\n        updateLoadedPaper(response);\n      });\n    }\n  }\n};\nfunction updateLoadedPaper(response) {\n  if (response.abstract)\n    store.dispatch(\n      updatePaper({ paper: response, success: true, isLoading: false })\n    );\n  else {\n    store.dispatch(\n      updatePaper({ paper: response, success: false, isLoading: false })\n    );\n    M.toast({ html: response.error, displayLength: 1000 });\n  }\n}\n\nexport const onLoadedPaperChanged = (paper, state, oldpaper, oldState) => {\n  if (paper.success && paper.paper.abstract) {\n    // graph preparation happens here\n    var graph = state.graph.graph;\n    graph = mergePaperWithGraph(paper.paper, graph);\n    store.dispatch(updateGraph({ graph: graph }));\n  }\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport GraphSlice from \"./GraphSlice\";\nimport LoadedPaperSlice from \"./LoadedPaperSlice\";\nimport paperInputSliceReducer from \"./paperInputSlice\";\nimport {\n  onLoadedPaperChanged,\n  onPaperInputChange,\n} from \"./StateChangeListeners\";\n\nconst ReduxStateChangeListener = require(\"redux-state-change-listener\");\n\nconst store = configureStore({\n  reducer: {\n    paperInput: paperInputSliceReducer,\n    loadedPaper: LoadedPaperSlice,\n    graph: GraphSlice,\n  },\n});\n\nconst stateCallbackManager = new ReduxStateChangeListener(store);\n\nstateCallbackManager.register((state) => state.paperInput, onPaperInputChange);\nstateCallbackManager.register(\n  (state) => state.loadedPaper,\n  onLoadedPaperChanged\n);\n\nstateCallbackManager.start();\n\nexport default store;\n","import {\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  LineBasicMaterial,\n  BufferGeometry,\n  BufferAttribute,\n  Line,\n} from \"three\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport SpriteText from \"three-spritetext\";\n\nexport const generateBrightLinks = (link) => {\n  const linkColors = new Float32Array([255, 255, 255]);\n  const material = new LineBasicMaterial({\n    vertexColors: true,\n    transparent: true,\n  });\n  const geometry = new BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new BufferAttribute(new Float32Array(2 * 3), 3)\n  );\n  geometry.setAttribute(\"color\", new BufferAttribute(linkColors, 3));\n\n  return new Line(geometry, material);\n};\n\nexport const makeCustomNodes = (node) => {\n  var truncated_id = truncate(node.id, 25);\n  const sprite = generateSpriteText(truncated_id, node);\n\n  const mesh = generateNodeGeometry(node);\n\n  var group = new Group();\n  group.add(sprite, mesh);\n  return group;\n};\n\n\nexport const addUnrealBloomPass = (ref) => {\n  if (ref !== null) {\n    ref.d3Force(\"link\").distance((link) => 500);\n\n    var bloomPassObject = ref\n      .postProcessingComposer()\n      .passes.find((x) => x instanceof UnrealBloomPass);\n\n    // if the render passes do not contain a bloom object then add it\n    if (!bloomPassObject) {\n      bloomPassObject = new UnrealBloomPass();\n      setBloomParameters(bloomPassObject);\n      ref.postProcessingComposer().addPass(bloomPassObject);\n    }\n  }\n};\n\nexport function setBloomParameters(bloomPassObject) {\n  bloomPassObject.strength = 0.3;\n  bloomPassObject.radius = 0.2;\n  bloomPassObject.exposure = 0.7;\n  bloomPassObject.threshold = 0.1;\n}\n\n\n\nexport function generateNodeGeometry(node) {\n  const material = new MeshBasicMaterial({ color: node.node_color });\n\n  const mesh = new Mesh(node.geometry, material);\n  return mesh;\n}\n\nexport function generateSpriteText(truncated_id, node) {\n  const sprite = new SpriteText(truncated_id);\n  sprite.color = node.text_color;\n  sprite.textHeight = 18;\n  sprite.position.y = 11;\n  return sprite;\n}\n\nexport function truncate(str, n) {\n  return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\n}","import React, { Suspense, useEffect, useRef, useState } from \"react\";\nimport { Col, ProgressBar, Row } from \"react-materialize\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport circle_node from \"./circle_node.svg\";\nimport cone_node from \"./cone_node.svg\";\nimport {\n  attachLabelsToEdges,\n  beautifyNodes,\n  convertToD3Graph,\n} from \"./GraphOperations\";\nimport store from \"../store/store\";\nimport { changeSelectedNode } from \"../store/GraphSlice\";\nimport { useSelector } from \"react-redux\";\nimport { DirectedGraph } from \"graphology\";\nimport {\n  addUnrealBloomPass,\n  generateBrightLinks,\n  makeCustomNodes,\n} from \"./ThreeJsEffects\";\n\nconst Card = React.lazy(() => import(\"react-materialize/lib/Card\"));\n\nconst CitationGraph = () => {\n  const redux_graph_object = useSelector((state) => state.graph);\n  const [graph, setGraph] = useState(graphToD3Conversion(new DirectedGraph()));\n  disableDefaultArrowKeysBehaviour();\n  useEffect(() => {\n    if (redux_graph_object.graph.toJSON().nodes.length !== graph.nodes.length) {\n      setGraph(graphToD3Conversion(redux_graph_object.graph));\n    }\n  }, [redux_graph_object, graph]);\n  return (\n    <Suspense fallback={<ProgressBar />}>\n      <Card title=\"Citation Graph\" actions={Legends}>\n        <ForceGraph3D\n          controlType=\"fly\"\n          width={window.innerWidth / 2.2}\n          height={window.innerHeight / 2}\n          ref={addUnrealBloomPass}\n          graphData={graph}\n          nodeThreeObject={makeCustomNodes}\n          onNodeClick={handleSelectedNode}\n          backgroundColor=\"#101020\"\n          linkThreeObject={generateBrightLinks}\n          cooldownTime={Infinity}\n        />\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default CitationGraph;\n\nconst handleSelectedNode = (node, event) => {\n  store.dispatch(changeSelectedNode({ node: node.attributes }));\n};\n\nfunction graphToD3Conversion(graph) {\n  var data = convertToD3Graph(graph);\n  data = attachLabelsToEdges(data);\n  data.nodes.map((node) => {\n    return beautifyNodes(node);\n  });\n  return data;\n}\n\nfunction disableDefaultArrowKeysBehaviour() {\n  window.addEventListener(\n    \"keydown\",\n    function (e) {\n      if (\n        [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1\n      ) {\n        e.preventDefault();\n      }\n    },\n    false\n  );\n}\n\nconst Legends = [\n  <Row>\n    <Col>\n      <img src={circle_node} width=\"20px\" alt=\"\" /> - References\n    </Col>\n    <Col>\n      <img src={cone_node} width=\"20px\" alt=\"\" /> - Citations\n    </Col>\n  </Row>,\n  <Row>\n    <Col>\n      <p>\n        <span className=\"yellow-text\"> Yellow </span>and{\" \"}\n        <span className=\"green-text\">Green</span> denote{\" \"}\n        <span className=\"red-text\">private </span>access papers.\n      </p>\n    </Col>\n    <Col>\n      <p>\n        <span className=\"purple-text\">Purple </span>and{\" \"}\n        <span className=\"blue-text\">Blue </span> denote{\" \"}\n        <span className=\"orange-text\">public </span> access papers.\n      </p>\n    </Col>\n  </Row>,\n];\n","import React, { Suspense } from \"react\";\nimport { Card, ProgressBar } from \"react-materialize\";\nimport { useSelector } from \"react-redux\";\nimport { updatePaper } from \"../store/LoadedPaperSlice\";\nimport { getPaperFromApi } from \"../store/SemanticScholarAPI\";\nimport store from \"../store/store\";\nimport { PaperLinks } from \"./PaperLinks\";\nimport * as M from \"materialize-css\";\n\nconst PaperDetails = React.lazy(() => import(\"./PaperDetails\"));\n\nconst SelectedNode = () => {\n  const selectedNode = useSelector((state) => state.graph.selectedNode);\n  let CardContent, CardActions;\n  if (selectedNode) {\n    CardContent = <PaperDetails paper={selectedNode} />;\n    CardActions = PaperLinks({ paper: selectedNode });\n    const LoadPaperComponent = (\n      <a\n        href=\"#\"\n        onClick={() => {\n          updateLoadedPaperAndGraph(selectedNode);\n        }}>\n        Load Paper\n      </a>\n    );\n    CardActions.unshift(LoadPaperComponent);\n  } else CardContent = \"Currently no node is selected...\";\n  return (\n    <Suspense fallback={<ProgressBar />}>\n      <Card title=\"Selected Paper\" actions={CardActions}>\n        {CardContent}\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default SelectedNode;\n\nfunction updateLoadedPaperAndGraph(selectedNode) {\n  if (selectedNode.arxivId) {\n    getPaperFromApi(selectedNode.arxivId, \"arxiv\").then((response) => {\n      updateLoadedPaper(response);\n    });\n  } else if (selectedNode.doi) {\n    getPaperFromApi(selectedNode.paperId).then((response) => {\n      updateLoadedPaper(response);\n    });\n  } else if (selectedNode.paperId) {\n    getPaperFromApi(selectedNode.paperId).then((response) => {\n      updateLoadedPaper(response);\n    });\n  }\n}\n\n// ! copied from StateChangeListener as is\nfunction updateLoadedPaper(response) {\n  if (response.abstract)\n    store.dispatch(\n      updatePaper({ paper: response, success: true, isLoading: false })\n    );\n  else {\n    store.dispatch(\n      updatePaper({ paper: response, success: false, isLoading: false })\n    );\n    M.toast({ html: response.error, displayLength: 1000 });\n  }\n}\n","import React, { Suspense } from \"react\";\nimport NavBar from \"./NavBar\";\nimport * as M from \"materialize-css\";\nimport { Col, ProgressBar, Row } from \"react-materialize\";\nimport { useSelector } from \"react-redux\";\nimport PDFViewer from \"./Components/PDFViewer\";\nimport LoadedPaper from \"./Components/LoadedPaper\";\nimport CitationGraph from \"./Components/CitationGraph\";\nimport SelectedNode from \"./Components/SelectedNode\";\nconst Container = React.lazy(() => import(\"react-materialize/lib/Container\"));\nconst PaperInput = React.lazy(() => import(\"./Components/PaperInput\"));\n\nfunction App() {\n  let isLoadedPaperReady = useSelector((state) => state.loadedPaper.success);\n\n  return (\n    <React.Fragment>\n      <NavBar />\n      <Suspense fallback={<ProgressBar />}>\n        {!isLoadedPaperReady && (\n          <Container>\n            <PaperInput />\n          </Container>\n        )}\n        {isLoadedPaperReady && <GraphWithPaperDetails />}\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\nconst GraphWithPaperDetails = () => {\n  return (\n    <Row>\n      <Col l={6}>\n        <CitationGraph />\n        <SelectedNode />\n        <PaperInput />\n      </Col>\n      <Col l={6}>\n        <LoadedPaper />\n        <PDFViewer />\n      </Col>\n    </Row>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport \"materialize-css/dist/css/materialize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  paperId: \"\",\n  paperType: \"\",\n};\n\nconst paperInputSlice = createSlice({\n  name: \"paperInfo\",\n  initialState,\n  reducers: {\n    addPaper(state, action) {\n      const paperId = action.payload.paperId;\n      const paperType = action.payload.paperType;\n      return {\n        ...state,\n        paperId: paperId,\n        paperType: paperType,\n      };\n    },\n  },\n});\n\nexport const { addPaper } = paperInputSlice.actions;\n\nexport default paperInputSlice.reducer;\n","import React from \"react\";\nconst Icon = React.lazy(() => import(\"react-materialize/lib/Icon\"));\n\nexport function PaperLinks({ paper }) {\n  return [\n    paper.arxivId && (\n      <URLComponent\n        url={`https://arxiv.org/pdf/${paper.arxivId}.pdf`}\n        id={paper.arxivId}\n        key={paper.arxivId}\n      />\n    ),\n    paper.doi && (\n      <URLComponent\n        url={`https://doi.org/${paper.doi}`}\n        id={paper.doi}\n        key={paper.doi}\n      />\n    ),\n    paper.url && (\n      <URLComponent url={paper.url} id={paper.paperId} key={paper.paperId} />\n    ),\n  ];\n}\nexport default PaperLinks;\n\nexport const URLComponent = ({ url, id }) => {\n  return (\n    <a href={url} key=\"\" target=\"_blank\" rel=\"noopener noreferrer\">\n      {id}\n      <Icon>open_in_new</Icon>\n    </a>\n  );\n};\n"],"sourceRoot":""}