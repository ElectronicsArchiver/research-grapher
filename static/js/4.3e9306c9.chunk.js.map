{"version":3,"sources":["Components/Graph/circle_node.svg","Components/Graph/cone_node.svg","Components/Graph/Graph.js","Components/utils.js"],"names":["Graph","props","myRef","React","createRef","state","graph","store","getState","graphReducer","startStoreListener","w","watch","subscribe","newVal","oldVal","objectPath","setState","fg","this","current","d3Force","distance","link","bloomPass","UnrealBloomPass","strength","radius","exposure","threshold","postProcessingComposer","addPass","window","addEventListener","e","indexOf","code","preventDefault","D3GraphProcessor","convertToD3Graph","data","attributes","options","title","actions","Legends","controlType","width","innerWidth","height","innerHeight","ref","graphData","nodeThreeObject","makeCustomNodes","onNodeClick","updateCurrentlySelectedNodeInStore","backgroundColor","linkThreeObject","generateBrightLinks","cooldownTime","Infinity","Component","src","circle_node","alt","cone_node","className","linkColors","Float32Array","material","LineBasicMaterial","vertexColors","transparent","geometry","BufferGeometry","setAttribute","BufferAttribute","Line","node","event","dispatch","type","str","n","sprite","truncated_id","SpriteText","color","text_color","textHeight","position","y","generateSpriteText","id","length","substr","mesh","MeshBasicMaterial","node_color","Mesh","generateNodeGeometry","group","Group","add"],"mappings":"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","file":"static/js/4.3e9306c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle_node.a9984316.svg\";","export default __webpack_public_path__ + \"static/media/cone_node.3631d62e.svg\";","import SpriteText from \"three-spritetext\";\nimport React, { Component } from \"react\";\nimport { D3GraphProcessor } from \"./GraphDataProcessor\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport { store } from \"../../StateManagement/store\";\nimport watch from \"redux-watch\";\nimport { Group, Mesh, MeshBasicMaterial, LineBasicMaterial, BufferGeometry, BufferAttribute, Line } from \"three\";\nimport { Card, Col, Row } from \"react-materialize\";\nimport { truncate } from \"../utils\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport circle_node from './circle_node.svg';\nimport cone_node from './cone_node.svg';\n\nexport class Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.state = {\n      graph: store.getState().graphReducer.graph,\n    };\n    this.startStoreListener();\n  }\n  startStoreListener() {\n    let w = watch(store.getState, \"graphReducer.isUpdating\");\n    store.subscribe(\n      w((newVal, oldVal, objectPath) => {\n        if (newVal === false) {\n          this.setState({\n            graph: store.getState().graphReducer.graph,\n          });\n        }\n      })\n    );\n  }\n\n  componentDidMount() {\n    const fg = this.myRef.current;\n    fg.d3Force(\"link\").distance((link) => 500);\n    const bloomPass = new UnrealBloomPass();\n    bloomPass.strength = 0.3;\n    bloomPass.radius = 0.2;\n    bloomPass.exposure = 1.1;\n    bloomPass.threshold = 0.1;\n    fg.postProcessingComposer().addPass(bloomPass);\n\n    disableDefaultArrowKeysBehaviour();\n  }\n  render() {\n    var graph = this.state.graph;\n    graph = D3GraphProcessor.convertToD3Graph(graph);\n    const { attributes, options, ...data } = graph;\n\n    return (\n      <Card title=\"Citation Graph\"\n        actions={Legends}>\n        <ForceGraph3D\n          controlType='fly'\n          width={window.innerWidth / 2.2}\n          height={window.innerHeight / 2}\n          ref={this.myRef}\n          graphData={data}\n          nodeThreeObject={makeCustomNodes}\n          onNodeClick={updateCurrentlySelectedNodeInStore}\n          backgroundColor=\"#101020\"\n          linkThreeObject={generateBrightLinks}\n          cooldownTime={Infinity}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default Graph;\n\nconst Legends = [\n  <Row>\n    <Col>\n      <img src={circle_node} width='20px' alt=\"\" /> - References\n    </Col>\n    <Col>\n      <img src={cone_node} width='20px' alt=\"\" /> - Citations\n    </Col>\n  </Row>,\n  <Row>\n    <Col>\n      <p>\n        <span className=\"yellow-text\"> Yellow </span>and <span className=\"green-text\">Green</span> denote <span className=\"red-text\">private </span>access papers.\n      </p>\n    </Col>\n    <Col>\n      <p>\n        <span className=\"purple-text\">Purple </span>and <span className=\"blue-text\">Blue </span> denote <span className=\"orange-text\">public </span> access papers.\n      </p>\n    </Col>\n  </Row>\n];\n\n\n\nconst generateBrightLinks = link => {\n  const linkColors = new Float32Array([255, 255, 255]);\n  const material = new LineBasicMaterial({ vertexColors: true, transparent: true });\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', new BufferAttribute(new Float32Array(2 * 3), 3));\n  geometry.setAttribute('color', new BufferAttribute(linkColors, 3));\n\n  return new Line(geometry, material);\n};\nconst updateCurrentlySelectedNodeInStore = (node, event) => {\n  store.dispatch({\n    type: \"UPDATE_CURRENTLY_SELECTED_NODE\",\n    node: node,\n  });\n};\nconst makeCustomNodes = (node) => {\n  var truncated_id = truncate(node.id, 25);\n  const sprite = generateSpriteText(truncated_id, node);\n\n  const mesh = generateNodeGeometry(node);\n\n  var group = new Group();\n  group.add(sprite, mesh);\n  return group;\n};\n\nfunction disableDefaultArrowKeysBehaviour() {\n  window.addEventListener(\"keydown\", function (e) {\n    if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1) {\n      e.preventDefault();\n    }\n  }, false);\n}\n\nfunction generateNodeGeometry(node) {\n  const material = new MeshBasicMaterial({ color: node.node_color });\n\n  const mesh = new Mesh(node.geometry, material);\n  return mesh;\n}\n\nfunction generateSpriteText(truncated_id, node) {\n  const sprite = new SpriteText(truncated_id);\n  sprite.color = node.text_color;\n  sprite.textHeight = 18;\n  sprite.position.y = 11;\n  return sprite;\n}\n","export function truncate(str, n) {\n    return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  "],"sourceRoot":""}