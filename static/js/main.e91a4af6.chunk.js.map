{"version":3,"sources":["store/LoadedPaperSlice.js","store/GraphSlice.js","store/SemanticScholarAPI.js","store/StateChangeListeners.js","store/store.js","store/paperInputSlice.js","Components/GraphOperations.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["LoadedPaperSlice","createSlice","name","initialState","paper","success","isLoading","reducers","updatePaper","state","actions","payload","graph","DirectedGraph","selectedNode","GraphSlice","updateGraph","changeSelectedNode","node","getPaperFromApi","paperId","paperType","url","baseUrl","undefined","fetch","then","response","json","updateLoadedPaper","abstract","store","dispatch","M","html","error","displayLength","ReduxStateChangeListener","require","configureStore","reducer","paperInput","paperInputSliceReducer","loadedPaper","stateCallbackManager","register","oldpaper","oldState","toLowerCase","mergePaperWithGraph","start","paperInputSlice","addPaper","action","citations","references","stripped_paper","mergeNode","title","mergeCitationsWithGraph","mergeReferencesWithGraph","forEach","citation","isCitation","mergeDirectedEdge","type","reference","isReference","convertToD3Graph","JSON","parse","stringify","toJSON","split","join","attachLabelsToEdges","links","map","link","source","target","label","attributes","beautifyNodes","arxivId","node_color","text_color","doi","color","colorizeNodes","geometry","SphereGeometry","ConeGeometry","BoxGeometry","generateNodeGeometry","NavBar","React","lazy","PDFViewer","LoadedPaper","CitationGraph","SelectedNode","Container","PaperInput","Row","Col","App","isLoadedPaperReady","useSelector","Fragment","fallback","GraphWithPaperDetails","l","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e91a4af6.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  paper: null,\n  success: false,\n  isLoading: false,\n};\n\nconst LoadedPaperSlice = createSlice({\n  name: \"LoadedPaper\",\n  initialState,\n  reducers: {\n    updatePaper: (state, actions) => {\n      return {\n        ...state,\n        paper: actions.payload.paper,\n        success: actions.payload.success,\n        isLoading: actions.payload.isLoading,\n      };\n    },\n  },\n});\n\nexport const { updatePaper } = LoadedPaperSlice.actions;\n\nexport default LoadedPaperSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { DirectedGraph } from \"graphology\";\n\nexport const initialState = {\n  graph: new DirectedGraph(),\n  selectedNode: null,\n};\n\nconst GraphSlice = createSlice({\n  name: \"Graph\",\n  initialState,\n  reducers: {\n    updateGraph: (state, actions) => {\n      return {\n        ...state,\n        graph: actions.payload.graph,\n      };\n    },\n    changeSelectedNode: (state, actions) => {\n      return {\n        ...state,\n        selectedNode: actions.payload.node,\n      };\n    },\n  },\n});\n\nexport const { updateGraph, changeSelectedNode } = GraphSlice.actions;\n\nexport default GraphSlice.reducer;\n","export function getPaperFromApi(paperId, paperType) {\n  const baseUrl = \"https://api.semanticscholar.org/v1/paper/\";\n  let url;\n  if (paperType !== null && paperType !== undefined)\n    url = baseUrl + paperType + \":\" + paperId;\n  else url = baseUrl + paperId;\n\n  return fetch(url)\n    .then((response) => response.json())\n    .then((response) => response);\n}\n","import { updatePaper } from \"./LoadedPaperSlice\";\nimport { getPaperFromApi } from \"./SemanticScholarAPI\";\nimport store from \"./store\";\nimport * as M from \"materialize-css\";\nimport { mergePaperWithGraph } from \"../Components/GraphOperations\";\nimport { updateGraph } from \"./GraphSlice\";\n\nexport const onPaperInputChange = (paper, state, oldpaper, oldState) => {\n  if (paper.paperId !== oldpaper.paperId) {\n    if (paper.paperType.toLowerCase() === \"arxiv\") {\n      getPaperFromApi(paper.paperId, paper.paperType).then((response) => {\n        updateLoadedPaper(response);\n      });\n    } else if (paper.paperType.toLowerCase() === \"doi\") {\n      getPaperFromApi(paper.paperId).then((response) => {\n        updateLoadedPaper(response);\n      });\n    } else if (paper.paperType.toLowerCase() === \"semanticscholar\") {\n      getPaperFromApi(paper.paperId).then((response) => {\n        updateLoadedPaper(response);\n      });\n    }\n  }\n};\nfunction updateLoadedPaper(response) {\n  if (response.abstract)\n    store.dispatch(\n      updatePaper({ paper: response, success: true, isLoading: false })\n    );\n  else {\n    store.dispatch(\n      updatePaper({ paper: response, success: false, isLoading: false })\n    );\n    M.toast({ html: response.error, displayLength: 1000 });\n  }\n}\n\nexport const onLoadedPaperChanged = (paper, state, oldpaper, oldState) => {\n  if (paper.success && paper.paper.abstract) {\n    // graph preparation happens here\n    var graph = state.graph.graph;\n    graph = mergePaperWithGraph(paper.paper, graph);\n    store.dispatch(updateGraph({ graph: graph }));\n  }\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport GraphSlice from \"./GraphSlice\";\nimport LoadedPaperSlice from \"./LoadedPaperSlice\";\nimport paperInputSliceReducer from \"./paperInputSlice\";\nimport {\n  onLoadedPaperChanged,\n  onPaperInputChange,\n} from \"./StateChangeListeners\";\n\nconst ReduxStateChangeListener = require(\"redux-state-change-listener\");\n\nconst store = configureStore({\n  reducer: {\n    paperInput: paperInputSliceReducer,\n    loadedPaper: LoadedPaperSlice,\n    graph: GraphSlice,\n  },\n});\n\nconst stateCallbackManager = new ReduxStateChangeListener(store);\n\nstateCallbackManager.register((state) => state.paperInput, onPaperInputChange);\nstateCallbackManager.register(\n  (state) => state.loadedPaper,\n  onLoadedPaperChanged\n);\n\nstateCallbackManager.start();\n\nexport default store;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  paperId: \"\",\n  paperType: \"\",\n};\n\nconst paperInputSlice = createSlice({\n  name: \"paperInfo\",\n  initialState,\n  reducers: {\n    addPaper(state, action) {\n      const paperId = action.payload.paperId;\n      const paperType = action.payload.paperType;\n      return {\n        ...state,\n        paperId: paperId,\n        paperType: paperType,\n      };\n    },\n  },\n});\n\nexport const { addPaper } = paperInputSlice.actions;\n\nexport default paperInputSlice.reducer;\n","import { DirectedGraph } from \"graphology\";\nimport { BoxGeometry, ConeGeometry, SphereGeometry } from \"three\";\n\nexport const mergePaperWithGraph = (paper, graph) => {\n  const { citations, references, ...stripped_paper } = paper;\n  graph.mergeNode(stripped_paper.title, stripped_paper);\n\n  mergeCitationsWithGraph(citations, stripped_paper, graph);\n  mergeReferencesWithGraph(references, stripped_paper, graph);\n  return graph;\n};\n\nconst mergeCitationsWithGraph = (citations, paper, graph) => {\n  citations.forEach((citation) => {\n    graph.mergeNode(citation.title, { ...citation, isCitation: true });\n    graph.mergeDirectedEdge(citation.title, paper.title, {\n      type: \"cites\",\n    });\n  });\n};\n\nconst mergeReferencesWithGraph = (references, paper, graph) => {\n  references.forEach((reference) => {\n    graph.mergeNode(reference.title, { ...reference, isReference: true });\n    graph.mergeDirectedEdge(paper.title, reference.title, {\n      type: \"refers\",\n    });\n  });\n};\n\nexport const convertToD3Graph = (graph) => {\n  return JSON.parse(\n    JSON.stringify(graph.toJSON())\n      .split('\"edges\":')\n      .join('\"links\":')\n      .split('\"key\":')\n      .join('\"id\":')\n  );\n};\n\nexport const attachLabelsToEdges = (graph) => {\n  graph.links = graph.links.map((link) => {\n    return {\n      source: link.source,\n      target: link.target,\n      label: link.attributes.type,\n    };\n  });\n  return graph;\n};\n\nexport const beautifyNodes = (node) => {\n  colorizeNodes(node);\n  generateNodeGeometry(node);\n  return node;\n};\nfunction generateNodeGeometry(node) {\n  if (node.attributes.isReference) {\n    node.geometry = new SphereGeometry(10, 10, 10);\n  } else if (node.attributes.isCitation) {\n    node.geometry = new ConeGeometry(10, 20, 10);\n  } else {\n    node.geometry = new BoxGeometry(10, 10, 10);\n  }\n}\n\nfunction colorizeNodes(node) {\n  if (node.attributes.arxivId) {\n    // pink and indigo (bladerunner 2049)\n    node.node_color = \"#d500f9\";\n    node.text_color = \"#3d5afe\";\n  } else if (node.attributes.doi || node.attributes.url) {\n    // TODO:look for alternative color combo\n    node.node_color = \"#13EC40\";\n    node.text_color = \"#FEE13D\";\n  } else {\n    node.color = \"red\";\n  }\n}\n","import React, { Suspense } from \"react\";\nimport * as M from \"materialize-css\";\nimport ProgressBar from \"react-materialize/lib/ProgressBar\";\nimport { useSelector } from \"react-redux\";\nconst NavBar = React.lazy(() => import(\"./NavBar\"));\nconst PDFViewer = React.lazy(() => import(\"./Components/PDFViewer\"));\nconst LoadedPaper = React.lazy(() => import(\"./Components/LoadedPaper\"));\nconst CitationGraph = React.lazy(() => import(\"./Components/CitationGraph\"));\nconst SelectedNode = React.lazy(() => import(\"./Components/SelectedNode\"));\nconst Container = React.lazy(() => import(\"react-materialize/lib/Container\"));\nconst PaperInput = React.lazy(() => import(\"./Components/PaperInput\"));\nconst Row = React.lazy(() => import(\"react-materialize/lib/Row\"));\nconst Col = React.lazy(() => import(\"react-materialize/lib/Col\"));\n\nfunction App() {\n  let isLoadedPaperReady = useSelector((state) => state.loadedPaper.success);\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={<ProgressBar />}>\n        <NavBar />\n        {!isLoadedPaperReady && (\n          <Container>\n            <PaperInput />\n          </Container>\n        )}\n        {isLoadedPaperReady && <GraphWithPaperDetails />}\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\nconst GraphWithPaperDetails = () => {\n  return (\n    <Row>\n      <Col l={6}>\n        <Suspense fallback={<ProgressBar />}>\n          <CitationGraph />\n        </Suspense>\n        <Suspense fallback={<ProgressBar />}>\n          <SelectedNode />\n        </Suspense>\n        <Suspense fallback={<ProgressBar />}>\n          <PaperInput />\n        </Suspense>\n      </Col>\n      <Col l={6}>\n        <Suspense fallback={<ProgressBar />}>\n          <LoadedPaper />\n        </Suspense>\n        <Suspense fallback={<ProgressBar />}>\n          <PDFViewer />\n        </Suspense>\n      </Col>\n    </Row>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport \"materialize-css/dist/css/materialize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}