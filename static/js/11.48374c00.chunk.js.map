{"version":3,"sources":["Components/circle_node.svg","Components/cone_node.svg","Components/ThreeJsEffects.js","Components/CitationGraph.js"],"names":["generateBrightLinks","link","linkColors","Float32Array","material","LineBasicMaterial","vertexColors","transparent","geometry","BufferGeometry","setAttribute","BufferAttribute","Line","makeCustomNodes","node","str","n","sprite","truncated_id","SpriteText","color","text_color","textHeight","position","y","generateSpriteText","id","length","substr","mesh","MeshBasicMaterial","node_color","Mesh","generateNodeGeometry","group","Group","add","addUnrealBloomPass","ref","d3Force","distance","bloomPassObject","postProcessingComposer","passes","find","x","UnrealBloomPass","strength","radius","exposure","threshold","setBloomParameters","addPass","Card","React","lazy","Col","Row","handleSelectedNode","CitationGraph","redux_graph_object","useSelector","state","graph","useState","graphToD3Conversion","DirectedGraph","setGraph","window","addEventListener","e","indexOf","code","preventDefault","useEffect","toJSON","nodes","fallback","title","actions","Legends","controlType","width","innerWidth","height","innerHeight","graphData","nodeThreeObject","onNodeClick","backgroundColor","linkThreeObject","cooldownTime","Infinity","event","store","dispatch","changeSelectedNode","attributes","data","convertToD3Graph","attachLabelsToEdges","map","beautifyNodes","src","circle_node","alt","cone_node","className"],"mappings":"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","file":"static/js/11.48374c00.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle_node.5dd02228.svg\";","export default __webpack_public_path__ + \"static/media/cone_node.3631d62e.svg\";","import {\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  LineBasicMaterial,\n  BufferGeometry,\n  BufferAttribute,\n  Line,\n} from \"three\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport SpriteText from \"three-spritetext\";\n\nexport const generateBrightLinks = (link) => {\n  const linkColors = new Float32Array([255, 255, 255]);\n  const material = new LineBasicMaterial({\n    vertexColors: true,\n    transparent: true,\n  });\n  const geometry = new BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new BufferAttribute(new Float32Array(2 * 3), 3)\n  );\n  geometry.setAttribute(\"color\", new BufferAttribute(linkColors, 3));\n\n  return new Line(geometry, material);\n};\n\nexport const makeCustomNodes = (node) => {\n  var truncated_id = truncate(node.id, 25);\n  const sprite = generateSpriteText(truncated_id, node);\n\n  const mesh = generateNodeGeometry(node);\n\n  var group = new Group();\n  group.add(sprite, mesh);\n  return group;\n};\n\n\nexport const addUnrealBloomPass = (ref) => {\n  if (ref !== null) {\n    ref.d3Force(\"link\").distance((link) => 500);\n\n    var bloomPassObject = ref\n      .postProcessingComposer()\n      .passes.find((x) => x instanceof UnrealBloomPass);\n\n    // if the render passes do not contain a bloom object then add it\n    if (!bloomPassObject) {\n      bloomPassObject = new UnrealBloomPass();\n      setBloomParameters(bloomPassObject);\n      ref.postProcessingComposer().addPass(bloomPassObject);\n    }\n  }\n};\n\nexport function setBloomParameters(bloomPassObject) {\n  bloomPassObject.strength = 0.3;\n  bloomPassObject.radius = 0.2;\n  bloomPassObject.exposure = 0.7;\n  bloomPassObject.threshold = 0.1;\n}\n\n\n\nexport function generateNodeGeometry(node) {\n  const material = new MeshBasicMaterial({ color: node.node_color });\n\n  const mesh = new Mesh(node.geometry, material);\n  return mesh;\n}\n\nexport function generateSpriteText(truncated_id, node) {\n  const sprite = new SpriteText(truncated_id);\n  sprite.color = node.text_color;\n  sprite.textHeight = 18;\n  sprite.position.y = 11;\n  return sprite;\n}\n\nexport function truncate(str, n) {\n  return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\n}","import React, { Suspense, useEffect,  useState } from \"react\";\nimport ProgressBar from \"react-materialize/lib/ProgressBar\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport circle_node from \"./circle_node.svg\";\nimport cone_node from \"./cone_node.svg\";\nimport {\n  attachLabelsToEdges,\n  beautifyNodes,\n  convertToD3Graph,\n} from \"./GraphOperations\";\nimport store from \"../store/store\";\nimport { changeSelectedNode } from \"../store/GraphSlice\";\nimport { useSelector } from \"react-redux\";\nimport { DirectedGraph } from \"graphology\";\nimport {\n  addUnrealBloomPass,\n  generateBrightLinks,\n  makeCustomNodes,\n} from \"./ThreeJsEffects\";\n\nconst Card = React.lazy(() => import(\"react-materialize/lib/Card\"));\nconst Col = React.lazy(() => import(\"react-materialize/lib/Col\"));\nconst Row = React.lazy(() => import(\"react-materialize/lib/Row\"));\n\nconst CitationGraph = () => {\n  const redux_graph_object = useSelector((state) => state.graph);\n  const [graph, setGraph] = useState(graphToD3Conversion(new DirectedGraph()));\n  disableDefaultArrowKeysBehaviour();\n  useEffect(() => {\n    if (redux_graph_object.graph.toJSON().nodes.length !== graph.nodes.length) {\n      setGraph(graphToD3Conversion(redux_graph_object.graph));\n    }\n  }, [redux_graph_object, graph]);\n  return (\n    <Suspense fallback={<ProgressBar />}>\n      <Card title=\"Citation Graph\" actions={Legends}>\n        <ForceGraph3D\n          controlType=\"fly\"\n          width={window.innerWidth / 2.2}\n          height={window.innerHeight / 2}\n          ref={addUnrealBloomPass}\n          graphData={graph}\n          nodeThreeObject={makeCustomNodes}\n          onNodeClick={handleSelectedNode}\n          backgroundColor=\"#101020\"\n          linkThreeObject={generateBrightLinks}\n          cooldownTime={Infinity}\n        />\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default CitationGraph;\n\nconst handleSelectedNode = (node, event) => {\n  store.dispatch(changeSelectedNode({ node: node.attributes }));\n};\n\nfunction graphToD3Conversion(graph) {\n  var data = convertToD3Graph(graph);\n  data = attachLabelsToEdges(data);\n  data.nodes.map((node) => {\n    return beautifyNodes(node);\n  });\n  return data;\n}\n\nfunction disableDefaultArrowKeysBehaviour() {\n  window.addEventListener(\n    \"keydown\",\n    function (e) {\n      if (\n        [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].indexOf(e.code) > -1\n      ) {\n        e.preventDefault();\n      }\n    },\n    false\n  );\n}\n\nconst Legends = [\n  <Row>\n    <Col>\n      <img src={circle_node} width=\"20px\" alt=\"\" /> - References\n    </Col>\n    <Col>\n      <img src={cone_node} width=\"20px\" alt=\"\" /> - Citations\n    </Col>\n  </Row>,\n  <Row>\n    <Col>\n      <p>\n        <span className=\"yellow-text\"> Yellow </span>and{\" \"}\n        <span className=\"green-text\">Green</span> denote{\" \"}\n        <span className=\"red-text\">private </span>access papers.\n      </p>\n    </Col>\n    <Col>\n      <p>\n        <span className=\"purple-text\">Purple </span>and{\" \"}\n        <span className=\"blue-text\">Blue </span> denote{\" \"}\n        <span className=\"orange-text\">public </span> access papers.\n      </p>\n    </Col>\n  </Row>,\n];\n"],"sourceRoot":""}