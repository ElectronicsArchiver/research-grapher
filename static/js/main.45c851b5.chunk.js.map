{"version":3,"sources":["Components/UserInput.js","Components/NavBar.js","Components/PaperDetails.js","Components/LoadPaperButton.js","ResearchGrapher.js","App.js","reportWebVitals.js","index.js","StateManagement/store.js","StateManagement/Reducers.js","StateManagement/Watcher.js","Components/APIHandler.js","Components/Graph/GraphDataProcessor.js"],"names":["UserInput","name","onSubmit","event","preventDefault","text_input","document","getElementById","value","paperType","querySelector","store","dispatch","type","toast","M","getInstance","close","id","placeholder","autoFocus","className","NavBar","Fragment","alignLinks","brand","NavbarSearchButton","actions","flat","modal","node","waves","trigger","class","Component","PaperDetails","props","paper","arxivLinkConfig","URL","arxivId","location_name","paperId","doiLinkConfig","doi","SemanticScholarLinkConfig","url","authors","showAuthorNames","year","ShowAbstract","abstract","venue","LinkTemplate","href","target","rel","map","author","join","LoadPaperButton","useDispatch","useState","reducedPaperDetails","setReducedPaperDetails","currently_selected_node","useSelector","state","graphReducer","useEffect","attributes","buttonConfig","onClick","tooltip","tooltipOptions","position","Graph","React","lazy","PDFViewer","ResearchGrapher","showPaper","setShowPaper","paper_watcher","watch","getState","subscribe","newVal","oldVal","objectPath","ShowPaperDetailsAndPdf","l","ShowPaper","ShowPaperDetails","paperReducer","setPaper","arxivPaper","title","ShowPaperPdf","fallback","ShowGraphComponent","ShowUserInputComponent","ShowCurrentNode","ShowGraphWithCurrentNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","createStore","combineReducers","graph","DirectedGraph","isUpdating","action","toastReducer","composeWithDevTools","id_watcher","fetch","res","json","error","fetchPaperDetailsFromAPI","result","undefined","startArxivIdWatcher","citations","references","data","JSONGraphProcessor","updateStoreGraph","startPaperWatcher","toast_watcher","html","startToastWatcher","forEach","citation","mergeNode","isCitation","mergeDirectedEdge","reference","isReference","numCitedBy","this","addReferencesWithEdgesToGraph","addCitationsWithEdgesToGraph","D3GraphProcessor","convertGraphologyToD3Graph","convertToD3StyleLabeledLinks","nodes","decorateNodes","colorCodeNodes","reshapeBasedOnCitations","geometry","SphereGeometry","ConeGeometry","BoxGeometry","node_color","text_color","color","JSON","parse","stringify","toJSON","split","links","link","source","label"],"mappings":"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","file":"static/js/main.45c851b5.chunk.js","sourcesContent":["import React from \"react\";\nimport { store } from \"../StateManagement/store\";\nimport * as M from \"materialize-css\";\n\nexport const UserInput = () => {\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    var text_input = document.getElementById(\"text-input\").value;\n\n    var paperType = document.querySelector('input[name=\"paperType\"]:checked');\n\n    if (paperType === null)\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: \"Please select a paper type\"\n      });\n\n\n    else {\n      paperType = paperType.value;\n\n      closeModal();\n\n      if (paperType === \"doi\" || paperType === \"semanticscholar\")\n        store.dispatch({\n          type: \"UPDATE_PAPER_ID\",\n          id: text_input,\n        });\n\n      else if (paperType === \"arxiv\")\n        store.dispatch({\n          type: \"UPDATE_PAPER_ID\",\n          id: paperType + \":\" + text_input,\n        });\n    }\n  };\n\n  return (\n    <div>\n      <span>Enter the ID of the paper you are looking for</span>\n\n      <form name=\"paper-info\" onSubmit={onSubmit}>\n        <input\n          placeholder=\"Enter paper Id \"\n          autoFocus={true}\n          id=\"text-input\"\n          name=\"paper-id-text\"\n        />\n        <p>\n          <label>\n            <input name=\"paperType\" type=\"radio\" value=\"arxiv\" />\n            <span>Arxiv</span>\n          </label>\n        </p>\n        <p>\n          <label>\n            <input name=\"paperType\" type=\"radio\" value=\"doi\" />\n            <span>DOI</span>\n          </label>\n        </p>\n        <p>\n          <label>\n            <input name=\"paperType\" type=\"radio\" value=\"semanticscholar\" />\n            <span>SemanticScholar Paper Id</span>\n          </label>\n        </p>\n        <input type=\"submit\" value=\"Submit\" className=\"btn black white-text\" />\n      </form>\n    </div>\n  );\n};\n\nfunction closeModal() {\n  M.Modal.getInstance(document.getElementById(\"searchbuttonmodal\")).close();\n}","import React, { Component } from \"react\";\nimport { Navbar } from \"react-materialize\";\nimport { Button, Icon, Modal, NavItem } from \"react-materialize\";\nimport { UserInput } from \"./UserInput\";\n\n\n\nexport const NavBar = () => {\n  return (\n    <React.Fragment>\n      <div className=\"navbar-fixed \">\n        <Navbar\n          className=\"black\"\n          alignLinks=\"right\"\n          brand={<span className=\"brand-logo\">Research Grapher</span>}>\n          <NavbarSearchButton />\n        </Navbar>\n      </div>\n    </React.Fragment>\n  );\n};\n\n\n\n\n\nexport class NavbarSearchButton extends Component {\n  render() {\n    return (\n      <NavItem>\n        <Modal\n          id=\"searchbuttonmodal\"\n          actions={[\n            <Button flat modal=\"close\" node=\"button\" waves=\"green\">\n              Close\n            </Button>,\n          ]}\n          trigger={\n\n\n            <Icon class=\"material-icons-outlined\">\n              note_add\n              </Icon>\n\n\n          }>\n          <UserInput />\n        </Modal>\n      </NavItem>\n    );\n  }\n}\n","import React from \"react\";\nimport { Icon } from \"react-materialize\";\n\nexport const PaperDetails = (props) => {\n  const paper = props.paper;\n  const arxivLinkConfig = {\n    URL: \"https://arxiv.org/abs/\" + paper.arxivId,\n    location_name: \"arXiv\",\n    paperId: paper.arxivId,\n  };\n  const doiLinkConfig = {\n    URL: \"https://doi.org/\" + paper.doi,\n    location_name: \"doi\",\n    paperId: paper.doi,\n  };\n  const SemanticScholarLinkConfig = {\n    URL: paper.url,\n    location_name: \"SemanticScholar\",\n    paperId: paper.paperId,\n  };\n\n  return (\n    <div>\n      Authors : {paper.authors ? showAuthorNames(paper) : \"Unknown\"}\n      <br />\n      Year : {paper.year ? paper.year : \"Unknown\"}\n      <br />\n      <ShowAbstract abstract={paper.abstract} />\n      Venue : {paper.venue ? paper.venue : \"Unknown\"}\n      <br />\n      <h6>Links:</h6>\n      {paper.arxivId ? <LinkTemplate {...arxivLinkConfig} /> : null}\n      {paper.doi ? <LinkTemplate {...doiLinkConfig} /> : null}\n      {paper.url ? <LinkTemplate {...SemanticScholarLinkConfig} /> : null}\n    </div>\n  );\n};\n\nexport const LinkTemplate = (props) => {\n  return (\n    <div>\n      {props.location_name} :\n      <a href={props.URL} target=\"_blank\" rel=\"noopener noreferrer\">\n        {props.paperId}\n        <Icon>open_in_new</Icon>\n      </a>\n    </div>\n  );\n};\n\nfunction ShowAbstract(props) {\n  if (props.abstract) return <div> Abstract : {props.abstract} </div>;\n  else return null;\n}\n\nfunction showAuthorNames(paper) {\n  return paper.authors\n    .map((author) => {\n      return author.name;\n    })\n    .join(\", \");\n}\n","import { useEffect, useState } from \"react\";\nimport { Button } from \"react-materialize\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport const LoadPaperButton = () => {\n  const dispatch = useDispatch();\n  const [reducedPaperDetails, setReducedPaperDetails] = useState(null);\n  // This can be generalised for other type of papers aswell\n  var currently_selected_node = useSelector(\n    (state) => state.graphReducer.currently_selected_node\n  );\n  useEffect(() => {\n    if (currently_selected_node)\n      setReducedPaperDetails(currently_selected_node.attributes);\n  },[currently_selected_node]);\n\n  return (\n    <Button\n      {...buttonConfig}\n      onClick={(event) => {\n        // TODO: add other paper id methods aswell\n        var id;\n\n        if (reducedPaperDetails.arxivId) {\n          id = \"arxiv:\" + reducedPaperDetails.arxivId;\n        } else if (reducedPaperDetails.doi) {\n          id = reducedPaperDetails.doi;\n        } else if (reducedPaperDetails.paperId) {\n          id = reducedPaperDetails.paperId;\n        }\n        dispatch({\n          type: \"UPDATE_PAPER_ID\",\n          id: id,\n        });\n      }}\n      tooltip=\"Preview the paper in the PDF Window\"\n      tooltipOptions={{\n        position: \"top\",\n      }}\n      className=\"orange-text\">\n      Load Paper\n    </Button>\n  );\n};\n\nconst buttonConfig = {\n  flat: true,\n  modal: \"close\",\n  node: \"button\",\n  waves: \"light\",\n};\n","import React, { useEffect, useState, Suspense } from \"react\";\nimport watch from \"redux-watch\";\nimport { useSelector } from \"react-redux\";\nimport { NavBar } from \"./Components/NavBar\";\nimport { store } from \"./StateManagement/store\";\nimport { UserInput } from \"./Components/UserInput\";\nimport { PaperDetails } from \"./Components/PaperDetails\";\nimport { LoadPaperButton } from \"./Components/LoadPaperButton\";\nimport { Card, CardPanel, Col, Container, ProgressBar, Row } from \"react-materialize\";\n\n\nconst Graph = React.lazy(() => import(\"./Components/Graph/Graph\"));\nconst PDFViewer = React.lazy(() => import(\"./PDFViewer\"));\n\nexport const ResearchGrapher = () => {\n  const [showPaper, setShowPaper] = useState(false);\n\n  useEffect(() => {\n    let paper_watcher = watch(store.getState, \"paperReducer.paper\");\n    store.subscribe(\n      paper_watcher((newVal, oldVal, objectPath) => (newVal !== null && newVal !== false) ? setShowPaper(true) : null)\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <NavBar />\n      {showPaper ? <ShowPaper /> : <ShowUserInputComponent />}\n    </React.Fragment>\n  );\n};\n\n\nconst ShowPaperDetailsAndPdf = (props) => {\n  return (\n    <Col l={6}>\n      <ShowPaperDetails />\n      <ShowPaperPdf />\n    </Col>\n  );\n};\n\n\nexport const ShowPaper = (props) => {\n  return (\n    <React.Fragment>\n      <Row>\n        <Col l={6}>\n          <ShowGraphWithCurrentNode />\n        </Col>\n        <ShowPaperDetailsAndPdf />\n      </Row>\n    </React.Fragment>\n  );\n};\n\n\n\nconst ShowPaperDetails = (props) => {\n  const [paper, setPaper] = useState(store.getState().paperReducer.paper);\n  // This can be generalised for other type of papers aswell\n  var arxivPaper = useSelector((state) => state.paperReducer.paper);\n  useEffect(() => setPaper(arxivPaper), [arxivPaper]);\n  return (\n    <Card title=\"Recently loaded paper\">\n      <span>Title : {paper.title}</span>\n      <PaperDetails paper={paper} />\n    </Card>\n  );\n};\n\n\nconst ShowPaperPdf = () => {\n  return (\n    <Suspense fallback={<ProgressBar/>}>\n      <PDFViewer />\n    </Suspense>)\n};\n\n\nconst ShowGraphComponent = () => {\n  return (\n    <Suspense fallback={<ProgressBar/>}>\n      <Graph />\n    </Suspense>)\n};\n\n\nconst ShowUserInputComponent = () => {\n  return (\n    <Container>\n      <CardPanel className=\"large\">\n        <UserInput />\n      </CardPanel>\n    </Container>\n  );\n};\n\n\nconst ShowCurrentNode = () => {\n  const [reducedPaperDetails, setReducedPaperDetails] = useState(null);\n  var currently_selected_node = useSelector(\n    (state) => state.graphReducer.currently_selected_node\n  );\n  useEffect(() => {\n    if (currently_selected_node)\n      setReducedPaperDetails(currently_selected_node.attributes);\n  }, [currently_selected_node]);\n  return (\n    <React.Fragment>\n      {currently_selected_node && reducedPaperDetails && (\n        <Card title=\"Selected Node\" actions={<LoadPaperButton />}>\n          <span>Title : {reducedPaperDetails.title}</span>\n          <PaperDetails paper={reducedPaperDetails} />\n        </Card>\n      )}\n    </React.Fragment>\n  );\n};\n\n\nconst ShowGraphWithCurrentNode = () => {\n  return (\n    <React.Fragment>\n      <Row>\n        <ShowGraphComponent />\n        <ShowCurrentNode />\n      </Row>\n    </React.Fragment>\n  );\n};\n","import React, { Component } from \"react\";\nimport { ResearchGrapher } from \"./ResearchGrapher\";\nimport \"materialize-css/dist/css/materialize.css\";\nimport \"material-icons/iconfont/material-icons.css\";\nimport * as M from \"materialize-css\";\n\nexport default class App extends Component {\n  componentDidMount() {\n    M.AutoInit();\n  }\n  render() {\n    return <ResearchGrapher />;\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./StateManagement/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, combineReducers } from \"redux\";\nimport { graphReducer, toastReducer, paperReducer } from \"./Reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  startArxivIdWatcher,\n  startPaperWatcher,\n  startToastWatcher,\n} from \"./Watcher\";\n\nexport const store = createStore(\n  combineReducers({\n    graphReducer,\n\n    toastReducer,\n    paperReducer,\n  }),\n  // remove this in prod build\n  composeWithDevTools()\n);\n\nstartArxivIdWatcher();\nstartPaperWatcher();\nstartToastWatcher();\n","import { DirectedGraph } from \"graphology\";\n\nexport function graphReducer(\n  state = {\n    graph: new DirectedGraph(),\n    currently_selected_node: null,\n    isUpdating: false,\n  },\n  action\n) {\n  switch (action.type) {\n    case \"GRAPH_UPDATE_STARTED\":\n      return {\n        ...state,\n        isUpdating: true,\n      };\n    case \"UPDATE_GRAPH\":\n      return {\n        ...state,\n        graph: action.graph,\n      };\n    case \"GRAPH_UPDATE_FINISHED\":\n      return {\n        ...state,\n        isUpdating: false,\n      };\n    case \"UPDATE_CURRENTLY_SELECTED_NODE\":\n      return {\n        ...state,\n        currently_selected_node: action.node,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function toastReducer(state = { toast: \"\" }, action) {\n  if (action.type === \"SEND_TOAST\") {\n    return { ...state, toast: action.toast };\n  }\n  return state;\n}\n\nexport function paperReducer(state = { paper: \"\", id: \"\" }, action) {\n  switch (action.type) {\n    case \"UPDATE_PAPER\":\n      return {\n        ...state,\n        paper: action.paper,\n      };\n\n    case \"UPDATE_PAPER_ID\":\n      return {\n        ...state,\n        id: action.id,\n      };\n\n    default:\n      return state;\n  }\n}\n","import watch from \"redux-watch\";\nimport { fetchPaperDetailsFromAPI } from \"../Components/APIHandler\";\nimport { JSONGraphProcessor } from \"../Components/Graph/GraphDataProcessor\";\nimport { store } from \"./store\";\nimport M from \"materialize-css\";\n\nexport const startArxivIdWatcher = () => {\n  // after id is changed update the paper\n  let id_watcher = watch(store.getState, \"paperReducer.id\");\n  store.subscribe(\n    id_watcher((newVal, oldVal, objectPath) => {\n      if (newVal !== oldVal) {\n        loadPaperFromApi(newVal);\n      }\n    })\n  );\n};\n\nexport const startPaperWatcher = () => {\n  // after paper is updated, update graph to include data of papers\n  let paper_watcher = watch(store.getState, \"paperReducer.paper\");\n  store.subscribe(\n    paper_watcher((newVal, oldVal, objectPath) => {\n      if (newVal !== oldVal) {\n        const { citations, references, ...data } = newVal;\n        JSONGraphProcessor.updateStoreGraph(data, citations, references);\n      }\n    })\n  );\n};\n\nexport const startToastWatcher = () => {\n  // fires after toast is updated\n  let toast_watcher = watch(store.getState, \"toastReducer.toast\");\n  store.subscribe(\n    toast_watcher((newVal, oldVal, objectPath) => {\n      if (newVal)\n        M.toast({ html: newVal });\n      else\n      M.toast({ html: oldVal });\n    })\n  );\n};\n\nfunction loadPaperFromApi(paperId) {\n  fetchPaperDetailsFromAPI(paperId).then((result) => {\n    if (result === undefined) {\n    } else if (result.url) {\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: \"Loading paper please wait\",\n      });\n      store.dispatch({\n        type: \"UPDATE_PAPER\",\n        paper: result,\n      });\n    } else if (result.error) {\n      //  if the api doesn't have a paper with that id toss this prompt\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: result.error,\n      });\n    } else {\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: \"The paper ID seems appreas to be wrong\",\n      });\n    }\n  });\n}\n","import { store } from \"../StateManagement/store\";\n\nexport function fetchPaperDetailsFromAPI(paperId) {\n  return fetch(\n    \"https://api.semanticscholar.org/v1/paper/\" + paperId\n  ).then(\n    (res) => res.json(),\n    // fetch error\n    (error) => {\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: \"Failed to connect to the API\",\n      });\n    }\n  );\n}\n","import { BoxGeometry, ConeGeometry, SphereGeometry } from \"three\";\nimport { store } from \"../../StateManagement/store\";\n\nexport class JSONGraphProcessor {\n  static addCitationsWithEdgesToGraph(citations, graph, paper) {\n    citations.forEach((citation) => {\n      graph.mergeNode(citation.title, { ...citation, isCitation: true });\n      graph.mergeDirectedEdge(citation.title, paper.title, {\n        type: \"cites\",\n      });\n    });\n  }\n\n  static addReferencesWithEdgesToGraph(references, graph, paper) {\n    references.forEach((reference) => {\n      graph.mergeNode(reference.title, { ...reference, isReference: true });\n      graph.mergeDirectedEdge(paper.title, reference.title, {\n        type: \"refers\",\n      });\n    });\n  }\n\n  static updateStoreGraph(paper, citations, references) {\n    var graph = store.getState().graphReducer.graph;\n\n    if (paper.numCitedBy > 50) {\n      store.dispatch({\n        type: \"SEND_TOAST\",\n        toast: \"High Citation Count detected system may lag\",\n      });\n    }\n\n    // Add the base paper to the graph\n    graph.mergeNode(paper.title, paper);\n    // Add the references paper to the graph\n    this.addReferencesWithEdgesToGraph(references, graph, paper);\n    this.addCitationsWithEdgesToGraph(citations, graph, paper);\n\n    store.dispatch({ type: \"GRAPH_UPDATE_STARTED\" });\n    //updated graph\n    store.dispatch({\n      type: \"UPDATE_GRAPH\",\n      graph: graph,\n    });\n\n    store.dispatch({ type: \"GRAPH_UPDATE_FINISHED\" });\n  }\n}\n\nexport class D3GraphProcessor {\n  static convertToD3Graph(graph) {\n    graph = this.convertGraphologyToD3Graph(graph);\n    graph = this.convertToD3StyleLabeledLinks(graph);\n\n    graph.nodes.map((node) => this.decorateNodes(node));\n\n    return graph;\n  }\n  static decorateNodes(node) {\n    // coloring for links\n    D3GraphProcessor.colorCodeNodes(node);\n    //   shapes based on reference or citation\n    D3GraphProcessor.reshapeBasedOnCitations(node);\n    return node;\n  }\n  static reshapeBasedOnCitations(node) {\n    if (node.attributes.isReference) {\n      node.geometry = new SphereGeometry(10, 10, 10);\n    } else if (node.attributes.isCitation) {\n      node.geometry = new ConeGeometry(10, 20, 10);\n    } else {\n      node.geometry = new BoxGeometry(10, 10, 10);\n    }\n  }\n\n  static colorCodeNodes(node) {\n    if (node.attributes.arxivId) {\n      // pink and indigo (bladerunner 2049)\n      node.node_color = \"#d500f9\";\n      node.text_color = \"#3d5afe\";\n    } else if (node.attributes.doi || node.attributes.url) {\n      // TODO:look for alternative color combo\n      node.node_color = \"#13EC40\";\n      node.text_color = \"#FEE13D\";\n    } else {\n      node.color = \"red\";\n    }\n  }\n\n  static convertGraphologyToD3Graph(graph) {\n    return JSON.parse(\n      JSON.stringify(graph.toJSON())\n        .split('\"edges\":')\n        .join('\"links\":')\n        .split('\"key\":')\n        .join('\"id\":')\n    );\n  }\n  static convertToD3StyleLabeledLinks(graph) {\n    graph.links = graph.links.map((link) => {\n      return {\n        source: link.source,\n        target: link.target,\n        label: link.attributes.type,\n      };\n    });\n    return graph;\n  }\n}\n"],"sourceRoot":""}